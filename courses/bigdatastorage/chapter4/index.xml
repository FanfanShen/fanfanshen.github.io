<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第4章 聚集操作 | 沈凡凡 - 南京审计大学计算机学院 - 学术主页</title>
    <link>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/</link>
      <atom:link href="https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/index.xml" rel="self" type="application/rss+xml" />
    <description>第4章 聚集操作</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.fanfanshen.cn/media/icon_hu10226378635250344412.png</url>
      <title>第4章 聚集操作</title>
      <link>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/</link>
    </image>
    
    <item>
      <title>4.1 单个集合中的基础聚集函数</title>
      <link>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;当需要返回集合中文档记录的总条数或者返回不
重复的文档记录时，可以使用 MongoDB 提供
的单个集合中的基础聚集函数.&lt;/strong&gt;&lt;br&gt;
1.db.collection.count(query, options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回集合中的文档记录数量；&lt;/li&gt;
&lt;li&gt;query 为查询条件；&lt;/li&gt;
&lt;li&gt;options 可选参数，可包含 limit,skip 等；&lt;/li&gt;
&lt;li&gt;例如： db.customers.count({cutst_id:100}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.db.collection.estimatedDocumentCount(options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计集合中的文档记录数量；&lt;/li&gt;
&lt;li&gt;只有options可选参数，可包含maxTimeMS(执行统计时允许等待的最大时长)；&lt;/li&gt;
&lt;li&gt;例：db.customers.estimatedDocumentCount()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.db.collection.countDocuments(query, options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和count()类似&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.db.collection.distinct(field, query, options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回指定字段的非重复值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;field为需要distinct的字段名；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uery为查询过滤条件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;options可选参数，是否区分大小写或字符串比较规则等。&lt;br&gt;
例如&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;db.books.distinct({“book_id”})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;嵌套字段：db.address.distinct({“location.type”})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也支持返回数组字段中非重复值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.1-1.png&#34;
    alt=&#34;4.1-1&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;4.1-1&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>4.2  管道聚集框架</title>
      <link>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.2/</guid>
      <description>&lt;p&gt;MongoDB的管道聚合框架是参考UNIX上的管道命令实现的，数据通过一个多步骤的管道，&lt;strong&gt;每个步骤&lt;/strong&gt;都会对数据进行&lt;strong&gt;加工&lt;/strong&gt;处理，最后返回需要的结果集。&lt;br&gt;
&lt;strong&gt;管道提供了高效的数据分析流程，是MongoDB中首选的数据分析方法。&lt;/strong&gt;&lt;br&gt;
例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db.books.aggregate([&lt;br&gt;
{$match:{status:&#34;normal&#34;}},  
  {$group:{_id:&amp;quot;$bookid&#34;,total:{$sum:&amp;quot;$num&amp;quot;}}}&lt;br&gt;
])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.2-1.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.2-2.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.2-3.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;管道聚集的语法格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;db.collection.aggregate(pipeline,options)&lt;br&gt;
pipeline为数组类型参数，包含一系列处理步骤，常用的管道操作符有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$match：过滤文档&lt;/li&gt;
&lt;li&gt;$limit：限制管道中文件的数据&lt;/li&gt;
&lt;li&gt;$skip：跳过指定的文档数量，返回剩下的&lt;/li&gt;
&lt;li&gt;$sort：对所输入的文档进行排序&lt;/li&gt;
&lt;li&gt;$group：对文档进行分组后计算聚集结果&lt;/li&gt;
&lt;li&gt;$out：输出文档到新集合中（必须是管道操作的最后一步）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;与$group一起使用的计算聚集操符：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$first：返回group操作后的第一个值&lt;/li&gt;
&lt;li&gt;$last：返回group操作后的最后一个值&lt;/li&gt;
&lt;li&gt;$max：返回group操作后的最大值&lt;/li&gt;
&lt;li&gt;$min：返回group操作后的最小值&lt;/li&gt;
&lt;li&gt;$avg：返回group操作后的平均值&lt;/li&gt;
&lt;li&gt;$sum：返回group操作后所有值求和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;管道中$group分组语法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;db.collection.aggregate([&lt;br&gt;
{ $group:   
{ _id: “$itemtype”,&lt;br&gt;
&amp;lt; field1&amp;gt;: { &amp;lt; accumulator1&amp;gt; : &amp;lt; expression1&amp;gt; }, &amp;hellip; }&lt;br&gt;
}&lt;br&gt;
])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id为必选字段，itemtype为被分组字段, 写成$itemtype，可为空或null;&lt;/li&gt;
&lt;li&gt;field1自定义返回字段名，&lt;accumulator1&gt;为可选计算操作，$sum等，&lt;expression1&gt; 为计算传递参数&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4.3 MapReduce编程</title>
      <link>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://www.fanfanshen.cn/courses/bigdatastorage/chapter4/4.3/</guid>
      <description>&lt;p&gt;MongoDB提供了当前流行的MapReduce并行编程模型，为&lt;strong&gt;海量数据的查询分析&lt;/strong&gt;提供了一种更加高效的方法。&lt;/p&gt;
&lt;p&gt;用MongoDB做分布式存储，再用MapReduce来做分析。&lt;/p&gt;
&lt;p&gt;Map-Reduce操作有两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个map阶段处理每一个文档，并为每一个输入的文档产生一个或多个对象，&lt;/li&gt;
&lt;li&gt;在reduce阶段，对上一步Map产生的输出结果进行合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;map-reduce也可以有一个最终的阶段来对最后的输出结果进行修改，就像其他聚集操作一样&lt;/p&gt;
&lt;p&gt;map-reduce能够指定一个查询条件来对输入文档的查询结果进行排序以及部分输出（sort and limit）。&lt;/p&gt;
&lt;p&gt;Map-reduce一般采用自定义JavaScript函数来处理map操作与reduce操作以及可选的最后一个最终操作；&lt;/p&gt;
&lt;p&gt;采用自定义的JavaScript能够比管道聚集更灵活，然而一般情况下map-reduce&lt;strong&gt;比管道聚集更加低效&lt;/strong&gt;，也更加复杂。&lt;/p&gt;
&lt;p&gt;Map-reduce进行聚集的示例：
&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.3-1.png&#34;
    alt=&#34;4.3-1&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;4.3-1&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令：db.orders.mapReduce(
function(){emit(this.custid,this.amount);},
function(key,values){return Array.sum(values)},
{ query:{status:&amp;ldquo;A&amp;rdquo;}, out:&amp;ldquo;order_totals&amp;rdquo; } )&lt;/li&gt;
&lt;li&gt;query：查询过滤条件，返回状态为A的值；&lt;/li&gt;
&lt;li&gt;map：映射对应字段，产生键值对，emit(key,value)；&lt;/li&gt;
&lt;li&gt;reduce：对map数据进行归约，对数组中value求和；&lt;/li&gt;
&lt;li&gt;out：输出结果保存在集合order_totals中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程：query -&amp;gt; map -&amp;gt;reduce&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.3-2.png&#34;
    alt=&#34;4.3-2&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;4.3-2&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://www.fanfanshen.cn/courses/BigDataStorage/chapter4/images/4.3-3.png&#34;
    alt=&#34;4.3-3&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;4.3-3&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>
