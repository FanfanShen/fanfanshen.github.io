<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第7章 分片集群 | Fanfan Shen&#39;s Homepage</title>
    <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/</link>
      <atom:link href="https://fanfanshen.github.io/courses/bigdatastorage/chapter7/index.xml" rel="self" type="application/rss+xml" />
    <description>第7章 分片集群</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://fanfanshen.github.io/media/icon_hu10226378635250344412.png</url>
      <title>第7章 分片集群</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/</link>
    </image>
    
    <item>
      <title>7.1 分片集群的部署架构</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;分片部署架构解决的问题&lt;/strong&gt;&lt;br&gt;
存储海量数据&lt;br&gt;
高效的读/写海量数据&lt;br&gt;
&lt;strong&gt;分片集群部署的原理&lt;/strong&gt;&lt;br&gt;
随着运行时间的推移，数据库的索引和数据文件会变得越来越大，对于单节点的机器来说，迟早会突破内存的限制，当磁盘上的数据文件和索引远大于内存的大小时，这个时候操作系统会频繁的进行内存交换，导致整个数据库系统的读写性能下降。&lt;br&gt;
因此对于大数据的处理，要时刻监控mongoDB的磁盘I/O性能、可用内存的大小，在数据库内存使用率达到一定程度时就要考虑分片了。通过分片使整个数据库分布在各个片上，每个片拥有数据库的一部分数据，从而降低内存使用率，提高读写性能&lt;br&gt;
&lt;strong&gt;分片集群的部署架构&lt;/strong&gt;&lt;br&gt;
一、分片shard&lt;br&gt;
1、每一个片就是一个复制集;&lt;br&gt;
2、复制集中的每个成员可能是一个mongod实例；&lt;br&gt;
3、复制集所具备的特性比如：自动故障转移、冗余备份。在每个分片上均有体现 &lt;br&gt;
二、mongos路由进程 &lt;br&gt;
1、将整个分片集群看成一个整体，使分片集群对整个客户端来说是透明的,当客户端发起读/写操作时，由mongos路由进程将该操作路由到具体的分片上 &lt;br&gt;
2、此外,mongos是一个轻量级且非持久性的进程。轻量级表示它不会保存任何数据库中的数据
三、config配置服务器&lt;br&gt;
1、mongos路由进程会从confg配置服务器上同步元数据信息，因此confg配置服务器要能实现这些元数据信息的持久化。&lt;br&gt;
2、配置服务器上的数据如果丢失，那么整个分片集群就无法使用&lt;br&gt;
3、在生产环境中通常利用三台配置服务器来实现冗余备份，这三台服务器是独立的，并不是复制集架构
&lt;em&gt;&lt;strong&gt;具体结构见下图&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.1-1.png&#34;
    alt=&#34;7.1-1&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;7.1-1&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7.2 手动部署一个分片集群</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;搭建分片集群步骤&lt;/strong&gt;&lt;br&gt;
1、创建文件夹db_rs0&lt;br&gt;
2、在db_rs0文件夹下创建data、logs文件夹&lt;br&gt;
3、data文件夹下创建rs0_0，rs0_1，rs0_2,logs文件夹下创建rs0_0.log、rs0_1.log、rs0_2.log &lt;br&gt;
4、创建configs_rs0文件夹。代表分片集rs0&lt;br&gt;
5、在configs_rs0下写入rs0_0.conf 、rs0_1.conf 、rs0_2.conf&lt;/p&gt;
&lt;p&gt;rs0中primary节点的配置文件为rs0_0.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs0\data\rs0_0&lt;br&gt;
logpath =  D:\mongodb\db_rs0\logs\rs0_0.log&lt;br&gt;
journal = true  （7.0版本这句话可以删掉）
port = 40000&lt;br&gt;
replSet = rs0&lt;br&gt;
shardsvr=true   //分片服务&lt;/p&gt;
&lt;p&gt;rs0中secondary节点的配置文件为rs0_1.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs0\data\rs0_1&lt;br&gt;
logpath =  D:\mongodb\db_rs0\logs\rs0_1.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40001&lt;br&gt;
replSet = rs0&lt;br&gt;
shardsvr=true   //分片服务&lt;/p&gt;
&lt;p&gt;rs0中arbiter节点的配置文件为rs0_2.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs0\data\rs0_2&lt;br&gt;
logpath =  D:\mongodb\db_rs0\logs\rs0_2.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40002&lt;br&gt;
replSet = rs0&lt;br&gt;
shardsvr=true   //分片服务&lt;/p&gt;
&lt;p&gt;6、rs0中3个节点配置完成后，初始化和配置复制集：&lt;br&gt;
先启动3个服务器：.\mongod.exe &amp;ndash;config D:\mongodb\configs_rs0\rs0_0.conf&lt;br&gt;
（将rs0_0.conf替换为rs0_1.conf、rs0_2.conf即可） &lt;br&gt;
再开一个终端窗口mongo &amp;ndash;port 40000 // 连接实例进行初始化
rs.initiate()&lt;br&gt;
rs0:PRIMARY&amp;gt;rs.add(“localhost:40001”)&lt;br&gt;
rs0:PRIMARY&amp;gt;rs.addArb(“localhost:40002”)&lt;br&gt;
rs0:PRIMARY&amp;gt;rs.status() //查看状态是否成功&lt;br&gt;
7、重复步骤1-5建立分片集1
rs1中primary节点的配置文件为rs1_0.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs1\data\rs1_0&lt;br&gt;
logpath =  D:\mongodb\db_rs1\logs\rs1_0.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40003&lt;br&gt;
replSet = rs1&lt;br&gt;
shardsvr=true&lt;/p&gt;
&lt;p&gt;rs1中secondary节点的配置文件为rs1_1.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs1\data\rs1_1&lt;br&gt;
logpath =  D:\mongodb\db_rs1\logs\rs1_1.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40004&lt;br&gt;
replSet = rs1&lt;br&gt;
shardsvr=true&lt;/p&gt;
&lt;p&gt;rs1中arbiter节点的配置文件为rs1_2.conf：&lt;br&gt;
dbpath = D:\mongodb\db_rs1\data\rs1_2&lt;br&gt;
logpath =  D:\mongodb\db_rs1\logs\rs1_2.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40005&lt;br&gt;
replSet = rs1&lt;br&gt;
shardsvr=true&lt;/p&gt;
&lt;p&gt;8、重复步骤6
先启动3个服务器：.\mongod.exe &amp;ndash;config D:\mongodb\configs_rs0\rs0_3.conf &lt;br&gt;
（将rs0_3.conf替换为rs0_4.conf、rs0_5.conf即可）   &lt;br&gt;
再开一个终端窗口mongo &amp;ndash;port 40003 // 连接实例进行初始化&lt;br&gt;
rs.initiate()&lt;br&gt;
rs1:PRIMARY&amp;gt;rs.add(“localhost:40004”)&lt;br&gt;
rs1:PRIMARY&amp;gt;rs.addArb(“localhost:40005”)&lt;br&gt;
rs1:PRIMARY&amp;gt;rs.status() //查看状态是否成功&lt;/p&gt;
&lt;p&gt;9、配置config服务器（是三个独立的配置服务器）&lt;br&gt;
首先建立db_configs文件夹&lt;br&gt;
接着在db_configs建立子文件夹data、logs&lt;br&gt;
最后在data里创建db_config0、db_config1、db_config2文件夹  在logs文件夹里创建db_config0.log、db_config1.log、db_config2.log&lt;br&gt;
以下是配置文件：&lt;br&gt;
config服务器0的配置文件cfgserver0.conf：&lt;br&gt;
dbpath = D:\mongodb\db_configs\data\db_config0&lt;br&gt;
logpath =  D:\mongodb\db_configs\logs\db_config0.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40006&lt;br&gt;
configsvr = true   //说明是配置服务器类型的实例&lt;br&gt;
replSet = rs-config  //复制集，但各个节点独立，不建立关联&lt;/p&gt;
&lt;p&gt;config服务器1的配置文件cfgserver1.conf：&lt;br&gt;
dbpath = D:\mongodb\db_configs\data\db_config1&lt;br&gt;
logpath =  D:\mongodb\db_configs\logs\db_config1.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40007&lt;br&gt;
configsvr = true&lt;br&gt;
replSet = rs-config&lt;/p&gt;
&lt;p&gt;config服务器2的配置文件cfgserver2.conf：&lt;br&gt;
dbpath = D:\mongodb\db_configs\data\db_config2&lt;br&gt;
logpath =  D:\mongodb\db_configs\logs\db_config2.log&lt;br&gt;
journal = true&lt;br&gt;
port = 40008&lt;br&gt;
configsvr = true&lt;br&gt;
replSet = rs-config&lt;/p&gt;
&lt;p&gt;10、配置完3个服务器节点后，需要分别初始化和配置服务器：&lt;br&gt;
mongo &amp;ndash;port 40006 //分别连接实例进行初始化&lt;br&gt;
mongo &amp;ndash;port 40007&lt;br&gt;
mongo &amp;ndash;port 40008&lt;br&gt;
rs.initiate()   //因为三个节点是独立的，均需要初始化。&lt;/p&gt;
&lt;p&gt;11、配置mongs路由服务器&lt;br&gt;
首先建立文件夹mongos建立子文件夹logs在该文件里添加mongos.log&lt;br&gt;
再在文件夹mongos添加cfg_mongos.conf&lt;br&gt;
其配置文件cfg_mongos.conf内容为：&lt;br&gt;
logpath =  D:\mongodb\mongos\logs\mongos.log   &lt;br&gt;
port = 40009&lt;br&gt;
configdb = rs-config/localhost:40006,localhost:40007,localhost:40008&lt;/p&gt;
&lt;p&gt;12、启动路由服务器：&lt;br&gt;
mongos &amp;ndash;config D:\mongodb\mongos\cfg_mongos.conf&lt;br&gt;
&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
实例对应的进程为mongos，路由服务器只是一个轻量级和非持久化操作的进程，因此上面的配置文件里面没有像其它mongod实例那样有一个存放数据文件的路径选项dbpath。&lt;/p&gt;
&lt;p&gt;13、添加各分片到集群&lt;br&gt;
打开一个mongo客户端连接到mongos服务器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mongo &amp;ndash;port 40009&lt;br&gt;
mongos&amp;gt; sh.addShard(“rs0/ localhost :40000,   localhost :40001”)  //出现ok:1，即成功&lt;br&gt;
mongos&amp;gt; sh.addShard(“rs1/ localhost :40003,   localhost :40004”)  //出现ok:1，即成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;14、通过命令sh.status()检查上面的配置是否正确&lt;br&gt;
正常的话输出信息类似下面：&lt;br&gt;
mongos&amp;gt; sh.status() //输出包含shards内容&lt;br&gt;
shards:&lt;br&gt;
{  &amp;ldquo;_id&amp;rdquo; : &amp;ldquo;rs0&amp;rdquo;,  &amp;ldquo;host&amp;rdquo; : &amp;ldquo;rs0/ localhost :40000, localhost :40001&amp;rdquo; }&lt;br&gt;
{  &amp;ldquo;_id&amp;rdquo; : &amp;ldquo;rs1&amp;rdquo;,  &amp;ldquo;host&amp;rdquo; : &amp;ldquo;rs1/ localhost :40003, localhost :40004&amp;rdquo; }&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/em&gt;
此时在整个分片集群中还没有创建任何其它数据库，通过路由进程mongos连接集群，执行命令show dbs可以看到集群中只有系统默认创建的一个config数据库，且这个数据库只存在于三个配置服务器上，config数据库中的集合包含了整个集群的配置信息，执行命令show collections，可以看到有如下集合：&lt;br&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.2-2.png&#34;
    alt=&#34;7.2-2&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;7.2-2&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;15、正确关闭集群
第一步：关闭所有mongoss路由实例&lt;br&gt;
use admin
db.shutdownServer()
第二步：关闭所有分片，先secondary再primary&lt;br&gt;
第三步：关闭所有配置服务器&lt;/p&gt;
&lt;p&gt;16、正确重启集群&lt;br&gt;
启动配置服务器、启动所有分片、启动mongos
不正确的顺序可能出现通信问题或失败&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现实生活环境中的实际部署的问题&lt;/strong&gt;  &lt;br&gt;
通过前面的分析可知，一个生产环境最少需要9个mongod实例进程，一个mongos进程实例，理论上说最少需要10台机器才能组成。 &lt;br&gt;
但是这些进程中有些并不需要很多软硬件资源，它们可以与其它进程共存部署在同一个机器上，如复制集中arbiter进程、mongos进程可以部署到应用程序所在的服务器，综合考虑后可以得到下面一个典型的部署：&lt;br&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.2-1.png&#34;
    alt=&#34;7.2-1&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;7.2-1&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7.3  分片工作机制</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter7/7.3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;7.3.1  使集合分片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1）连接到前面配置集群中的mongos实例&lt;/strong&gt;&lt;br&gt;
mongo &amp;ndash;port 40009&lt;br&gt;
&lt;strong&gt;2）在集群中创建数据库eshop和集合users&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mongos&amp;gt; use eshop&lt;/li&gt;
&lt;li&gt;mongos&amp;gt;&lt;/li&gt;
&lt;li&gt;db.users.insert({userid:1,username:&amp;ldquo;lili&amp;rdquo;,city:&amp;ldquo;beijing&amp;rdquo;})&lt;/li&gt;
&lt;li&gt;mongos&amp;gt; sh.status()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到此时数据库eshop还没支持分片，且数据库中所有未分片的集合将保存在片rs1中；&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-1.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3）分片&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mongoDB的分片是基于范围的，也就是说任何一个文档一定位于指定片键的某个范围内，一旦片键选择好后，chunks就会按照片键来将一部分documents从逻辑上组合在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里对users集合选择&amp;quot;city&amp;quot;字段作为片键来分片
假如现在&amp;quot;city&amp;quot;字段值有&amp;quot;beijing&amp;quot;、&amp;ldquo;guangzhou&amp;rdquo;、&amp;ldquo;changsha&amp;rdquo;，初始的时候随机的向集群中插入包含以上字段值的文档，此时由于chunks的大小未达到默认的阈值64MB，集群中应该只有一个chunk，随着继续插入文档，超过阈值的chunk会被分割成两个chunks，最终的chunks和片键分布可能如下表格所示。&lt;br&gt;
表格只是大体上描述了分片的情况，实际可能有所变化，其中-∞表示所有键值小于“beijing”的文档，∞表示所有键值大于&amp;quot;guangzhou&amp;quot;的文档。
开始键值	结束键值	所在分片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-2.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;另外chunks所包含的文档，并不是物理上的包含，它是一种逻辑包含，它只表示带有片键的文档会落在哪个范围内，而这个范围的文档对应的chunk位于哪个片是可以查询到的，后续的读写操作就定位到这个片上的具体集合中进行。&lt;br&gt;
通过命令使集合users分片，使集合分片必须先使其所在的数据库支持分片，例如：&lt;br&gt;
mongos&amp;gt; sh.enableSharding(&amp;ldquo;eshop&amp;rdquo;)  //使数据库支持分片&lt;br&gt;
对已有数据的集合进行分片，必须先在所选择的片键上创建一个索引，如果集合初始时没有任何数据，则mongoDB会自动在所选择的片键上创建一个索引。&lt;br&gt;
mongos&amp;gt; db.users.createIndex({city:1})  //创建基于片键的索引&lt;br&gt;
mongos&amp;gt; sh.shardCollection(&amp;ldquo;eshop.users&amp;rdquo;,{city:1})  //使集合分片&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-3.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;成功执行上面命令后，再次查看集群状态信息：
mongos&amp;gt; sh.status()&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-4.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分片
成功执行上面命令后，再次查看集群状态信息：
mongos&amp;gt; sh.status()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此块的包含键值范围是-∞到∞，且在片rs1上，因为此时集合中只有一条记录，还未进行块的分割、迁移。
&lt;strong&gt;4）继续插入数据使集合自动分片&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了观察到集合被分成多个chunk，并分布在多个片上，继续插入一些数据进行分析：&lt;br&gt;
for(var i = 1; i&amp;lt;10000;i++) db.users.insert({userid:i,username:&amp;ldquo;lili&amp;rdquo;+i,city:&amp;ldquo;beijing&amp;rdquo;})&lt;br&gt;
for(var i = 0; i&amp;lt;10000;i++) db.users.insert({userid:i,username:&amp;ldquo;xiaoming&amp;rdquo;+i,city:&amp;ldquo;changsha&amp;rdquo;})&lt;br&gt;
for(var i = 0; i&amp;lt;10000;i++) db.users.insert({userid:i,username:&amp;ldquo;xiaoqiang&amp;rdquo;+i,city:&amp;ldquo;guangzhou&amp;rdquo;})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续插入数据使集合自动分片
通过大量插入文档（注：上面插入的数据量不够）后，第一个chunk的大小会超过64MB时，出现chunk分割与迁移的过程。chunk可以修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接mongos&lt;br&gt;
use config&lt;br&gt;
db.settings.save({_id:”chunksize”,value:16})&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-5.png&#34;
    alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;A caption&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;再次观察集群的状态，字段databases值变为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-6.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;说明此时集群中有5个块，其中在片rs0上有2个块，在片rs1上有3个块，每个块包含一定区间范围的文档。为了更加清楚的知道这些块是如何分割和迁移的，可以查看changelog集合中的记录信息进行分析。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从命令db.changelog.find()输出内容中可以看到有以下几步：&lt;br&gt;
第一步：分割大于64MB的块，原来此块的片键的区间范围是-∞到∞，分割后区间变为-∞到&amp;quot;beijing&amp;quot;、&amp;ldquo;beijing&amp;quot;到∞两个区间。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-7.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p&gt;第二步：随着继续插入文档，区间&amp;quot;beijing&amp;quot;到∞所包含的块的大小超过64MB，此时这个区间又被分割为&amp;quot;beijing&amp;quot;到&amp;quot;guangzhou&amp;rdquo;、&amp;ldquo;guangzhou&amp;quot;到∞这两个区间。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-8.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p&gt;第三步：rs0有三个区块，这一步做的就是将区间-∞到&amp;quot;beijing&amp;quot;对应的chunk从片rs0迁移到片rs1，最终结果是分片rs0上包含&amp;quot;beijing&amp;quot;到&amp;quot;guangzhou&amp;rdquo;、&amp;ldquo;guangzhou&amp;quot;到∞两个块；分片rs1上包含区间-∞到&amp;quot;beijing&amp;quot;的块。&lt;/p&gt;
&lt;p&gt;不断增加数据，分片分割，依次类推，mongoDB就是这样来实现海量数据的分布式存储的，同时由于每个片又是由复制集组成，保证了数据的可靠性。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-9.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;7.3.2  集群平衡器&lt;br&gt;
上节中块的迁移操作是MongoDB中的一个叫做平衡器的后台进程自动完成的。&lt;br&gt;
MongoDB的平衡器是一个后台进程，监视每个分片上块的数目。当给定分片上的块数达到特定的迁移阈值时，平衡器会尝试在分片之间自动迁移块，使得每个分片达到相等数量的块。平衡器将比较多块的分片中的块迁移到块数量较少的分片中。平衡器迁移块，直到集合在分片之间的块均匀分布。&lt;br&gt;
平衡器的迁移阈值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-10.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-11.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p&gt;所有块的迁移都遵循如下流程：&lt;br&gt;
1.平衡器进程将moveChunk命令发送到源分片。&lt;br&gt;
2.源分片开启一个到目标片的移动进程。在迁移过程中，如果有改变chunk的动作，源分片也会响应这个动作。&lt;br&gt;
3.目标片开始请求chunk中的文档并复制接收到的数据&lt;br&gt;
4.当接收完块中的最后一个文档，目标分片将启动同步过程，以确保在迁移过程中引起数据变化的动作能够被重新执行&lt;br&gt;
5.当完全同步时，源分片连接到配置数据库，并使用块的新位置更新集群元数据。&lt;br&gt;
6.源分片完成元数据的更新后，一旦块上没有打开光标，源分片将删除其文档副本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7.3.3  集群的写与读
客户端应用程序对集群的读写都是通过mongos这个路由进程来进行的，与对单个mongod实例读写类似。如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter7/images/7.3-12.png&#34;
     alt=&#34;A caption&#34;&gt;&lt;figcaption&gt;
       &lt;p&gt;A caption&lt;/p&gt;
     &lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p&gt;数据的查询效率对集群来说非常重要；&lt;br&gt;
集群查询性能的因素包括：索引和片键&lt;br&gt;
查询语句可分为三类：&lt;br&gt;
第一种，不包含片键和索引的查询，性能较差；&lt;br&gt;
第二种，只包含片键的查询，性能一般；&lt;br&gt;
第三种，包含片键和索引的查询，性能较好；&lt;br&gt;
索引和片键均影响查询性能，当发现查询速度慢时，可以针对性的优化。
MongoDB是通过片键来路由读写请求操作的，好的路由能得到较好的读写负载均衡，下面对集中不同特性的片键进行分析：&lt;br&gt;
一、升序字段片键。新插入的文档可能属于某一个区间范围内，导致一个chunk读写过热。&lt;br&gt;
二、完全随机的片键。太过随机，导致数据太分散，数据会频繁的换进换出，降低性能。&lt;br&gt;
三、片键的取值范围有限。比如city仅有几个，当数据量大后，可能没有用于分割的片键值。&lt;br&gt;
可见，对海量数据的读写操作选择一个合适的片键并不容易，一个好的片键应具有：&lt;br&gt;
一、分发写操作&lt;br&gt;
二、读操作不能太过随机化，尽量局部化&lt;br&gt;
三、要能保证chunk能够一直被分割&lt;br&gt;
满足三点要求的片键通常需要几个字段进行组合，如{city:1,_id:1}，可满足。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
