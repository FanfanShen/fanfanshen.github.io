<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>《大数据存储技术》课程 | Fanfan Shen&#39;s Homepage</title>
    <link>https://fanfanshen.github.io/courses/bigdatastorage/</link>
      <atom:link href="https://fanfanshen.github.io/courses/bigdatastorage/index.xml" rel="self" type="application/rss+xml" />
    <description>《大数据存储技术》课程</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://fanfanshen.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>《大数据存储技术》课程</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/</link>
    </image>
    
    <item>
      <title>2.2删除操作</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.2/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.2/</guid>
      <description>&lt;h1 id=&#34;mongodb中基本命令&#34;&gt;MongoDB中基本命令&lt;/h1&gt;
&lt;h2 id=&#34;数据库删除操作&#34;&gt;数据库删除操作&lt;/h2&gt;
&lt;p&gt;deleteOne：从集合中删除一条文档记录&lt;br&gt;
deleteMany:批量删除集合中的文档记录&lt;br&gt;
&lt;strong&gt;语法&lt;/strong&gt;


















&lt;figure  id=&#34;figure-22-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.2-1.png&#34; alt=&#34;2.2-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.2-1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;语法解释&lt;/strong&gt;


















&lt;figure  id=&#34;figure-22-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.2-2.png&#34; alt=&#34;2.2-2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.2-2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.3修改操作</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.3/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.3/</guid>
      <description>&lt;h1 id=&#34;mongodb中基本命令&#34;&gt;MongoDB中基本命令&lt;/h1&gt;
&lt;h2 id=&#34;数据库更新操作&#34;&gt;数据库更新操作&lt;/h2&gt;
&lt;p&gt;updateOne:修改单条文档记录，即使查询多条也只更新第一条&lt;br&gt;
updateMany：修改所有匹配的文档记录&lt;br&gt;
&lt;strong&gt;语法&lt;/strong&gt;


















&lt;figure  id=&#34;figure-23-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.3-1.png&#34; alt=&#34;2.3-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.3-1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;语法解释&lt;/strong&gt;


















&lt;figure  id=&#34;figure-23-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.3-2.png&#34; alt=&#34;2.3-2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.3-2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;数据库更新操作-1&#34;&gt;数据库更新操作&lt;/h2&gt;
&lt;p&gt;replaceOne: 将文档记录替换为一条新文档记录&lt;br&gt;
update：相当于前三条的集合，取决于第二个参数&lt;br&gt;
&lt;strong&gt;语法&lt;/strong&gt;


















&lt;figure  id=&#34;figure-23-3&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.3-3.png&#34; alt=&#34;2.3-3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.3-3
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;语法解释&lt;/strong&gt;


















&lt;figure  id=&#34;figure-23-4&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.3-4.png&#34; alt=&#34;2.3-4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.3-4
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;数据库常用修改操作符&#34;&gt;数据库常用修改操作符&lt;/h2&gt;
&lt;p&gt;$unset表示删除集合字段；&lt;br&gt;
$rename将name重命名；$currentDate将字段的值修改为当前的时间；&lt;br&gt;
$mul将字段的值乘以一个数字；&lt;br&gt;
$min保留修改值和原值中最小的值；&lt;br&gt;
$max保留修改值和原值中最大的值；&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.4查询操作</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.4/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.4/</guid>
      <description>&lt;h1 id=&#34;mongodb中基本命令&#34;&gt;MongoDB中基本命令&lt;/h1&gt;
&lt;h2 id=&#34;数据库查询操作&#34;&gt;数据库查询操作&lt;/h2&gt;
&lt;p&gt;查询操作（ find() ）:BSON结构数据&lt;br&gt;
&lt;strong&gt;语法&lt;/strong&gt;


















&lt;figure  id=&#34;figure-24-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-1.png&#34; alt=&#34;2.4-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;语法解释&lt;/strong&gt;


















&lt;figure  id=&#34;figure-24-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-2.png&#34; alt=&#34;2.4-2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;SQL与MongoDB&lt;/strong&gt;


















&lt;figure  id=&#34;figure-24-3&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-3.png&#34; alt=&#34;2.4-3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-3
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;条件语法&lt;/strong&gt;&lt;br&gt;
1.查询文档find()，$and条件语法：&lt;br&gt;
对于单键：db.col.find({likes : {$lt :200, $gt : 100}})&lt;br&gt;
可以传入多个键(key)，每个键(key)以逗号隔开&lt;br&gt;
db.col.find({key1:value1, key2:value2}).pretty() &lt;br&gt;
db.collection.find({$and:[{key1:value1},{key2:value2}]}).pretty()&lt;br&gt;
2.查询文档find()，$or条件语法：&lt;br&gt;
db.collection.find({$or:[{key1:value1},{key2:value2}]}).pretty()&lt;br&gt;
3.查询文档find()，$not条件语法，非运算：&lt;br&gt;
4.查询文档find()，$exists: 是否包含某个字段&lt;br&gt;
{field:{$exists:&lt;boolean&gt;}}，true返回包含field字段的文档记录，false返回不包含该字段的记录
5.查询文档find()，$text: 文本查询&lt;br&gt;
返回匹配文本的记录&lt;br&gt;
6.查询文档find()，$regex: 正则表达式&lt;br&gt;
7.查询文档find()，嵌套文档查询，orders.item&lt;br&gt;
8.查询文档find()，支持地理位置查询&lt;br&gt;
&lt;strong&gt;数组操作&lt;/strong&gt;&lt;br&gt;
1.精确匹配数组值&lt;br&gt;
2.匹配数组中的一个元素值&lt;br&gt;
3.匹配指定位置的元素值&lt;br&gt;
4.指定数组索引并匹配嵌套文档中的字段值&lt;br&gt;


















&lt;figure  id=&#34;figure-24-4&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-4.png&#34; alt=&#34;2.4-4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-4
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;


















&lt;figure  id=&#34;figure-24-5&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-5.png&#34; alt=&#34;2.4-5&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-5
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
&lt;strong&gt;查询投射&lt;/strong&gt;&lt;br&gt;
返回匹配文档的指定字段；&lt;br&gt;
好处：减少返回数据到客户端的网络流量
&lt;strong&gt;查询示例&lt;/strong&gt;&lt;br&gt;


















&lt;figure  id=&#34;figure-24-6&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.4-6.png&#34; alt=&#34;2.4-6&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.4-6
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.4查询操作</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.5/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.5/</guid>
      <description>&lt;h1 id=&#34;mongodb中基本命令&#34;&gt;MongoDB中基本命令&lt;/h1&gt;
&lt;h2 id=&#34;数据库批量写操作&#34;&gt;数据库批量写操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;br&gt;
MongoDB支持将插入操作、修改操作、删除操作放在一个bulkwrite之中。执行批量写操作。即多种操作同时进行。&lt;br&gt;
&lt;strong&gt;语法&lt;/strong&gt;
语法格式如下：orderd是否按顺序执行


















&lt;figure  id=&#34;figure-21-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.1-1.png&#34; alt=&#34;2.1-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.1-1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.1插入操作</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.1/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter2/2.1/</guid>
      <description>&lt;h1 id=&#34;mongodb中概念对比&#34;&gt;MongoDB中概念对比&lt;/h1&gt;


















&lt;figure  id=&#34;figure-21-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter2/images/2.1-1.png&#34; alt=&#34;2.1-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      2.1-1
    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;h1 id=&#34;mongodb中基本命令&#34;&gt;MongoDB中基本命令&lt;/h1&gt;
&lt;h2 id=&#34;启动数据库命令&#34;&gt;启动数据库命令&lt;/h2&gt;
&lt;p&gt;mongod:启动服务器&lt;br&gt;
mongo.exe:启动客户端&lt;br&gt;
6.0以后版本输入mongosh即可同时开启&lt;/p&gt;
&lt;h2 id=&#34;数据库操作命令&#34;&gt;数据库操作命令&lt;/h2&gt;
&lt;p&gt;use DATABASE //如果数据库不存在，则创建数据库，否则切换到指定数据库。&lt;br&gt;
show dbs // 命令可以显示所有数据的列表。&lt;br&gt;
db // 命令可以显示当前数据库对象或集合。&lt;br&gt;
use runoob&lt;br&gt;
show dbs // 未显示runoob,插入数据runoob才显示&lt;br&gt;
db.runoob.insert({&amp;ldquo;name&amp;rdquo;:“helloword&amp;quot;})&lt;br&gt;
db.dropDatabase() //删除当前使用的数据库&lt;/p&gt;
&lt;h2 id=&#34;数据库创建集合命令&#34;&gt;数据库创建集合命令&lt;/h2&gt;
&lt;p&gt;db.createCollection(“customers”) //创建集合&lt;/p&gt;
&lt;h2 id=&#34;数据库删除集合命令&#34;&gt;数据库删除集合命令&lt;/h2&gt;
&lt;p&gt;db.collection.drop() //将collection替换为某个待删除的集合&lt;/p&gt;
&lt;h2 id=&#34;数据库插入操作命令&#34;&gt;数据库插入操作命令&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：db.COLLECTION_NAME.insert(document)&lt;br&gt;
&lt;strong&gt;注意点&lt;/strong&gt;：&lt;br&gt;
1、第一次插入数据时，不需要预先创建COLLECTION_NAME，插入数据时，会自动创建&lt;br&gt;
2、每次插入数据若没显示指定字段“_id”，则会默认创建一个主键“_id”，为ObjectId类型，好处是支持分布式存储。
3、在MongoDB中，每一个集合都必须有一个“_id”字段，不管是自动生成还是指定的，值必须唯一；&lt;br&gt;
4、如果插入重复值将会抛出异常&lt;/p&gt;
&lt;p&gt;###直接插入
db.users.insert({title: ‘MongoDB’, tags: ‘good’})&lt;br&gt;
db.users.find() //查看文档
###将数据定义为一个document变量
document= ({title: ‘MongoDB’, tags: ‘good’})
db.users.insert(document)
###其他语法
db.collection.insertOne():向指定集合中插入一条文档数据&lt;br&gt;
db.collection.insertMany([{d1},{d2}&amp;hellip;]):向指定集合中插入多条文档数据，参数为数组&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4.1单个集合中的基础聚集函数</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;当需要返回集合中文档记录的总条数或者返回不
重复的文档记录时，可以使用 MongoDB 提供
的单个集合中的基础聚集函数.&lt;/strong&gt;&lt;br&gt;
1.db.collection.count(query, options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回集合中的文档记录数量；&lt;/li&gt;
&lt;li&gt;query 为查询条件；&lt;/li&gt;
&lt;li&gt;options 可选参数，可包含 limit,skip 等；&lt;/li&gt;
&lt;li&gt;例如： db.customers.count({cutst_id:100}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.db.collection.estimatedDocumentCount(options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计集合中的文档记录数量；&lt;/li&gt;
&lt;li&gt;只有options可选参数，可包含maxTimeMS(执行统计时允许等待的最大时长)；&lt;/li&gt;
&lt;li&gt;例：db.customers.estimatedDocumentCount()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.db.collection.countDocuments(query, options)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和count()类似4.db.collection.distinct(field, query, options)- 返回指定字段的非重复值；&lt;/li&gt;
&lt;li&gt;field为需要distinct的字段名；&lt;/li&gt;
&lt;li&gt;uery为查询过滤条件；&lt;/li&gt;
&lt;li&gt;options可选参数，是否区分大小写或字符串比较规则等。  例如- db.books.distinct({“book_id”})&lt;/li&gt;
&lt;li&gt;嵌套字段：db.address.distinct({“location.type”})- 也支持返回数组字段中非重复值。

















&lt;figure  id=&#34;figure-41-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.1-1.png&#34; alt=&#34;4.1-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      4.1-1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4.2  管道聚集框架</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.2/</guid>
      <description>&lt;p&gt;MongoDB的管道聚合框架是参考UNIX上的管道命令实现的，数据通过一个多步骤的管道，&lt;strong&gt;每个步骤&lt;/strong&gt;都会对数据进行&lt;strong&gt;加工&lt;/strong&gt;处理，最后返回需要的结果集。&lt;br&gt;
&lt;strong&gt;管道提供了高效的数据分析流程，是MongoDB中首选的数据分析方法。&lt;/strong&gt;&lt;br&gt;
例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db.books.aggregate([    {$match:{status:&amp;ldquo;normal&amp;rdquo;}},    {$group:{_id:&amp;quot;$bookid&amp;quot;,total:{$sum:&amp;quot;$num&amp;quot;}}}  ])

















&lt;figure  id=&#34;figure-a-caption&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.2-1.png&#34; alt=&#34;A caption&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      A caption
    &lt;/figcaption&gt;&lt;/figure&gt;


















&lt;figure  id=&#34;figure-a-caption&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.2-2.png&#34; alt=&#34;A caption&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      A caption
    &lt;/figcaption&gt;&lt;/figure&gt;


















&lt;figure  id=&#34;figure-a-caption&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.2-3.png&#34; alt=&#34;A caption&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      A caption
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;strong&gt;管道聚集的语法格式：&lt;/strong&gt;db.collection.aggregate(pipeline,options)  pipeline为数组类型参数，包含一系列处理步骤，常用的管道操作符有以下几个：- $match：过滤文档- $limit：限制管道中文件的数据&lt;/li&gt;
&lt;li&gt;$skip：跳过指定的文档数量，返回剩下的- $sort：对所输入的文档进行排序&lt;/li&gt;
&lt;li&gt;$group：对文档进行分组后计算聚集结果&lt;/li&gt;
&lt;li&gt;$out：输出文档到新集合中（必须是管道操作的最后一步）&lt;strong&gt;与$group一起使用的计算聚集操符：&lt;/strong&gt;- $first：返回group操作后的第一个值&lt;/li&gt;
&lt;li&gt;$last：返回group操作后的最后一个值&lt;/li&gt;
&lt;li&gt;$max：返回group操作后的最大值&lt;/li&gt;
&lt;li&gt;$min：返回group操作后的最小值- $avg：返回group操作后的平均值&lt;/li&gt;
&lt;li&gt;$sum：返回group操作后所有值求和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;管道中$group分组语法：&lt;/strong&gt;db.collection.aggregate([  { $group:   { _id: “$itemtype”,  &amp;lt; field1&amp;gt;: { &amp;lt; accumulator1&amp;gt; : &amp;lt; expression1&amp;gt; }, &amp;hellip; }  }  ])   - id为必选字段，itemtype为被分组字段, 写成$itemtype，可为空或null;- field1自定义返回字段名，&lt;accumulator1&gt;为可选计算操作，$sum等，&lt;expression1&gt; 为计算传递参数&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4.3 MapReduce编程</title>
      <link>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://fanfanshen.github.io/courses/bigdatastorage/chapter4/4.3/</guid>
      <description>&lt;p&gt;MongoDB提供了当前流行的MapReduce并行编程模型，为&lt;strong&gt;海量数据的查询分析&lt;/strong&gt;提供了一种更加高效的方法。&lt;/p&gt;
&lt;p&gt;用MongoDB做分布式存储，再用MapReduce来做分析。Map-Reduce操作有两部分：  - 一个map阶段处理每一个文档，并为每一个输入的文档产生一个或多个对象，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在reduce阶段，对上一步Map产生的输出结果进行合并。map-reduce也可以有一个最终的阶段来对最后的输出结果进行修改，就像其他聚集操作一样  map-reduce能够指定一个查询条件来对输入文档的查询结果进行排序以及部分输出（sort and limit）。 Map-reduce一般采用自定义JavaScript函数来处理map操作与reduce操作以及可选的最后一个最终操作；采用自定义的JavaScript能够比管道聚集更灵活，然而一般情况下map-reduce&lt;strong&gt;比管道聚集更加低效&lt;/strong&gt;，也更加复杂。Map-reduce进行聚集的示例：

















&lt;figure  id=&#34;figure-43-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.3-1.png&#34; alt=&#34;4.3-1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      4.3-1
    &lt;/figcaption&gt;&lt;/figure&gt;
- 命令：db.orders.mapReduce(   function(){emit(this.custid,this.amount);},  function(key,values){return Array.sum(values)},  { query:{status:&amp;ldquo;A&amp;rdquo;}, out:&amp;ldquo;order_totals&amp;rdquo; } )- query：查询过滤条件，返回状态为A的值；&lt;/li&gt;
&lt;li&gt;map：映射对应字段，产生键值对，emit(key,value)；&lt;/li&gt;
&lt;li&gt;reduce：对map数据进行归约，对数组中value求和；&lt;/li&gt;
&lt;li&gt;out：输出结果保存在集合order_totals中；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程：query -&amp;gt; map -&amp;gt;reduce&lt;/strong&gt;

















&lt;figure  id=&#34;figure-43-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.3-2.png&#34; alt=&#34;4.3-2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      4.3-2
    &lt;/figcaption&gt;&lt;/figure&gt;


















&lt;figure  id=&#34;figure-43-3&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://fanfanshen.github.io/courses/BigDataStorage/chapter4/images/4.3-3.png&#34; alt=&#34;4.3-3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      4.3-3
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
